{
  "version": 3,
  "sources": ["../src/mnemonics.js", "../src/extension.js"],
  "sourcesContent": ["modules.export = [{\n        name: 'add',\n        desc: \"\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'pop',\n        output: 'push',\n        command: 'add',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'asl',\n        desc: \"\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'zero',\n        output: 'push',\n        command: 'lsl',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'asr',\n        desc: \"\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'zero',\n        output: 'push',\n        command: 'asr',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'bpget',\n        desc: \"\",\n        argc: 0,\n        input0: 'zero',\n        input1: 'zero',\n        output: 'push',\n        command: 'bpget',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'bpset',\n        desc: \"\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'zero',\n        output: 'discard',\n        command: 'bpset',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'bswap',\n        desc: \"Swaps bytes of stack top\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'zero',\n        output: 'push',\n        command: 'bswap',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'call',\n        desc: \"Pops address and calls it.\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'zero',\n        output: 'push',\n        command: 'setip',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'cmp',\n        desc: \"Compares two values from the stack.\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'pop',\n        output: 'discard',\n        command: 'sub',\n        flags: true,\n        condition: 'always'\n    },\n    {\n        name: 'cmp',\n        desc: \"Compares stack top to immediate value\",\n        argc: 1,\n        input0: 'pop',\n        input1: 'immediate',\n        output: 'discard',\n        command: 'sub',\n        flags: true,\n        condition: 'always'\n    },\n    {\n        name: 'div',\n        desc: \"\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'pop',\n        output: 'push',\n        command: 'div',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'dup',\n        desc: \"Duplicates the stack top\",\n        argc: 0,\n        input0: 'peek',\n        input1: 'zero',\n        output: 'push',\n        command: 'copy',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'frget',\n        desc: \"\",\n        argc: 0,\n        input0: 'zero',\n        input1: 'zero',\n        output: 'push',\n        command: 'frget',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'frset',\n        desc: \"\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'zero',\n        output: 'discard',\n        command: 'frset',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'intr',\n        desc: \"Invokes the given interrupts.\",\n        argc: 1,\n        input0: 'immediate',\n        input1: 'zero',\n        output: 'discard',\n        command: 'intr',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'iret',\n        desc: \"Returns from a interrupt.\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'pop',\n        output: 'discard',\n        command: 'setip',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'lsl',\n        desc: \"\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'zero',\n        output: 'push',\n        command: 'lsl',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'lsr',\n        desc: \"\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'zero',\n        output: 'push',\n        command: 'lsr',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'mod',\n        desc: \"\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'pop',\n        output: 'push',\n        command: 'mod',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'mul',\n        desc: \"\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'pop',\n        output: 'push',\n        command: 'mul',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'ret',\n        desc: \"Returns from a function call.\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'zero',\n        output: 'discard',\n        command: 'setip',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'call',\n        desc: \"Calls immediate address.\",\n        argc: 1,\n        input0: 'immediate',\n        input1: 'zero',\n        output: 'push',\n        command: 'setip',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'jmp',\n        desc: \"Pops address, jumps to it.\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'zero',\n        output: 'discard',\n        command: 'setip',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'ror',\n        desc: \"\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'zero',\n        output: 'push',\n        command: 'ror',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'sgnext',\n        desc: \"Sign-extends stack top.\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'zero',\n        output: 'push',\n        command: 'signext',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'cmpp',\n        desc: \"Compares stack top to immediate value, doesn't pop.\",\n        argc: 1,\n        input0: 'peek',\n        input1: 'immediate',\n        output: 'discard',\n        command: 'sub',\n        flags: true,\n        condition: 'always'\n    },\n    {\n        name: 'jmp',\n        desc: \"Jumps to immediate address.\",\n        argc: 1,\n        input0: 'immediate',\n        input1: 'zero',\n        output: 'discard',\n        command: 'setip',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'neg',\n        desc: \"\",\n        argc: 0,\n        input0: 'zero',\n        input1: 'pop',\n        output: 'push',\n        command: 'sub',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'not',\n        desc: \"\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'zero',\n        output: 'push',\n        command: 'not',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'add',\n        desc: \"Adds immediate to stack top.\",\n        argc: 1,\n        input0: 'pop',\n        input1: 'immediate',\n        output: 'push',\n        command: 'add',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'and',\n        desc: \"\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'pop',\n        output: 'push',\n        command: 'and',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'and',\n        desc: \"\",\n        argc: 1,\n        input0: 'pop',\n        input1: 'immediate',\n        output: 'push',\n        command: 'and',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'div',\n        desc: \"Divides stack top by immediate.\",\n        argc: 1,\n        input0: 'pop',\n        input1: 'immediate',\n        output: 'push',\n        command: 'div',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'mod',\n        desc: \"Computes modulus of stack top % immediate\",\n        argc: 1,\n        input0: 'pop',\n        input1: 'immediate',\n        output: 'push',\n        command: 'mod',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'mul',\n        desc: \"Multiplies immediate and stack top.\",\n        argc: 1,\n        input0: 'pop',\n        input1: 'immediate',\n        output: 'push',\n        command: 'mul',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'or',\n        desc: \"\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'pop',\n        output: 'push',\n        command: 'or',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'or',\n        desc: \"\",\n        argc: 1,\n        input0: 'pop',\n        input1: 'immediate',\n        output: 'push',\n        command: 'or',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'rol',\n        desc: \"\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'zero',\n        output: 'push',\n        command: 'rol',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'sub',\n        desc: \"\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'pop',\n        output: 'push',\n        command: 'sub',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'xor',\n        desc: \"\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'pop',\n        output: 'push',\n        command: 'xor',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'and',\n        desc: \"\",\n        argc: 1,\n        input0: 'pop',\n        input1: 'immediate',\n        output: 'push',\n        command: 'and',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'bpset',\n        desc: \"\",\n        argc: 1,\n        input0: 'immediate',\n        input1: 'zero',\n        output: 'discard',\n        command: 'bpset',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'frset',\n        desc: \"\",\n        argc: 1,\n        input0: 'immediate',\n        input1: 'zero',\n        output: 'discard',\n        command: 'frset',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'or',\n        desc: \"\",\n        argc: 1,\n        input0: 'pop',\n        input1: 'immediate',\n        output: 'push',\n        command: 'or',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'sub',\n        desc: \"Subtracts immediate from stack top.\",\n        argc: 1,\n        input0: 'pop',\n        input1: 'immediate',\n        output: 'push',\n        command: 'sub',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'xor',\n        desc: \"\",\n        argc: 1,\n        input0: 'pop',\n        input1: 'immediate',\n        output: 'push',\n        command: 'xor',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'xor',\n        desc: \"\",\n        argc: 1,\n        input0: 'pop',\n        input1: 'immediate',\n        output: 'push',\n        command: 'xor',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'frset',\n        desc: \"\",\n        argc: 2,\n        input0: 'immediate',\n        input1: 'immediate',\n        output: 'discard',\n        command: 'frset',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'get',\n        desc: \"\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'zero',\n        output: 'push',\n        command: 'get',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'set',\n        desc: \"\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'pop',\n        output: 'discard',\n        command: 'set',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'spget',\n        desc: \"\",\n        argc: 0,\n        input0: 'zero',\n        input1: 'zero',\n        output: 'push',\n        command: 'spget',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'spset',\n        desc: \"\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'zero',\n        output: 'discard',\n        command: 'spset',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'get',\n        desc: \"\",\n        argc: 1,\n        input0: 'immediate',\n        input1: 'zero',\n        output: 'push',\n        command: 'get',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'ld',\n        desc: \"Pops address, pushes word at address\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'zero',\n        output: 'push',\n        command: 'load16',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'ld8',\n        desc: \"Pops address, pushes byte at address\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'zero',\n        output: 'push',\n        command: 'load8',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'ld',\n        desc: \"Pushes the word from the immediate address\",\n        argc: 1,\n        input0: 'immediate',\n        input1: 'zero',\n        output: 'push',\n        command: 'load16',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'ld8',\n        desc: \"Pushes the byte from the immediate address\",\n        argc: 1,\n        input0: 'immediate',\n        input1: 'zero',\n        output: 'push',\n        command: 'load8',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'nop',\n        desc: \"Does nothing\",\n        argc: 0,\n        input0: 'zero',\n        input1: 'zero',\n        output: 'discard',\n        command: 'copy',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'pop',\n        desc: \"Removes the stack top\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'zero',\n        output: 'discard',\n        command: 'copy',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'push',\n        desc: \"Pushes a value\",\n        argc: 1,\n        input0: 'immediate',\n        input1: 'zero',\n        output: 'push',\n        command: 'copy',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'replace',\n        desc: \"Removes the stack top and pushes a value\",\n        argc: 1,\n        input0: 'immediate',\n        input1: 'pop',\n        output: 'push',\n        command: 'copy',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'set',\n        desc: \"\",\n        argc: 1,\n        input0: 'immediate',\n        input1: 'pop',\n        output: 'discard',\n        command: 'set',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'spset',\n        desc: \"\",\n        argc: 1,\n        input0: 'immediate',\n        input1: 'zero',\n        output: 'discard',\n        command: 'spset',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'st',\n        desc: \"Pops word and address, stores it.\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'pop',\n        output: 'discard',\n        command: 'store16',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'st8',\n        desc: \"Pops byte and address, stores it.\",\n        argc: 0,\n        input0: 'pop',\n        input1: 'pop',\n        output: 'discard',\n        command: 'store8',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'st',\n        desc: \"Pops a word and stores it at the immediate address\",\n        argc: 1,\n        input0: 'pop',\n        input1: 'immediate',\n        output: 'discard',\n        command: 'store16',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'st',\n        desc: \"Stores immediate word at immediate address.\",\n        argc: 2,\n        input0: 'immediate',\n        input1: 'immediate',\n        output: 'discard',\n        command: 'store16',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'st8',\n        desc: \"Pops a byte and stores it at the immediate address\",\n        argc: 1,\n        input0: 'pop',\n        input1: 'immediate',\n        output: 'discard',\n        command: 'store8',\n        flags: false,\n        condition: 'always'\n    },\n    {\n        name: 'st8',\n        desc: \"Stores immediate byte at immediate address.\",\n        argc: 2,\n        input0: 'immediate',\n        input1: 'immediate',\n        output: 'discard',\n        command: 'store8',\n        flags: false,\n        condition: 'always'\n    },\n];", "const vscode = require('vscode');\n\nconst mnemonics = require(\"./mnemonics.js\");\n\nfunction mnemonicPreview(m, f) {\n    var str = m.name;\n    for (var i = 0; i < m.argc; i++) {\n        if (i > 0)\n            str += \", \";\n        else\n            str += \" \";\n        if (f) {\n            str += f(i);\n        } else {\n            str += \"imm\";\n        }\n    }\n    return str;\n}\n\nfunction activate(context) {\n    // The command has been defined in the package.json file\n    // Now provide the implementation of the command with  registerCommand\n    // The commandId parameter must match the command field in package.json\n    let disposable = vscode.commands.registerCommand('spumk2.helloWorld', function() {\n        vscode.window.showInformationMessage('This is a example command!');\n    });\n\n    let hoverprovider = vscode.languages.registerHoverProvider('spumk2.asm', {\n        provideHover(document, position, token) {\n            const word_range = document.getWordRangeAtPosition(position);\n\n            if (word_range === null)\n                return;\n\n            const word = document.getText(word_range);\n            if (word === null)\n                return;\n\n            const text = new vscode.MarkdownString();\n            text.isTrusted = true;\n\n            for (var m of mnemonics) {\n                if (m.name !== word)\n                    continue;\n                var str = `**${m.name}** `;\n                for (var i = 0; i < m.argc; i++) {\n                    if (i > 0)\n                        str += \", \";\n                    str += \"imm\";\n                }\n                str += \"  \\n\\n\";\n                str += `| command   | **${m.command}**   |\\n`;\n                str += \"|-----------|--------------------|\\n\";\n                str += `| input 0   | **${m.input0}**    |\\n`;\n                str += `| input 1   | **${m.input1}**    |\\n`;\n                str += `| output    | **${m.output}**    |\\n`;\n                str += `| flags     | **${m.flags}**     |\\n`;\n                str += `| condition | **${m.condition}** |\\n`;\n                text.appendMarkdown(str + \"\\n\\n\");\n            }\n\n            if (text.value.length == 0)\n                return;\n\n            return new vscode.Hover(text);\n        }\n    });\n\n    const label_match = /^(\\w[\\w\\.]+):/;\n\n    let autocompleter = vscode.languages.registerCompletionItemProvider('spumk2.asm', {\n\n        // TODO: Implement improved auto-completions\n        // trigger on `[..for possible modifiers\n        // trigger on `[..:` for possible modifier values\n        // trigger on line start for mnemonics\n        // trigger after mnemonics for symbols/label names\n        provideCompletionItems(document, position, token, context) {\n            // console.log(\"completion\", document, position, token, context, document.lineAt(position.line));\n\n            let completions = [];\n            for (var i = 0; i < document.lineCount; i++) {\n                const line = document.lineAt(i).text;\n                const match = line.match(label_match);\n                if (match !== null) {\n                    completions.push(new vscode.CompletionItem(match[1]));\n                }\n            }\n\n            for (var m of mnemonics) {\n                let comp = new vscode.CompletionItem();\n                comp.label = mnemonicPreview(m);\n                comp.insertText = new vscode.SnippetString(mnemonicPreview(m, (i) => \"${\" + String(i + 1) + \":imm}\"));\n                comp.documentation = new vscode.MarkdownString(m.desc);\n                completions.push(comp);\n            }\n\n            return completions;\n        }\n    });\n\n    let defprovider = vscode.languages.registerDefinitionProvider('spumk2.asm', {\n        // TODO: Allow go-to into other .include files\n        provideDefinition(document, position, token) {\n            const word_range = document.getWordRangeAtPosition(position);\n\n            if (word_range === null)\n                return;\n\n            const word = document.getText(word_range);\n            if (word === null)\n                return;\n\n            for (var i = 0; i < document.lineCount; i++) {\n                const line = document.lineAt(i);\n                const match = line.text.match(label_match);\n                if (match !== null) {\n                    if (match[1] === word) {\n                        return new vscode.Location(document.uri, line.range.start);\n                    }\n                }\n            }\n        }\n    });\n\n    context.subscriptions.push(disposable);\n    context.subscriptions.push(hoverprovider);\n    context.subscriptions.push(autocompleter);\n    context.subscriptions.push(defprovider);\n\n    console.log(\"spumk2 ready.\");\n}\n\nfunction deactivate() {}\n\nmodule.exports = {\n    activate,\n    deactivate\n}"],
  "mappings": "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",
  "names": []
}
