local device_map = require "specification/device_map"

local page_start = 0x7FE000
local off = 0
local align = 16

local devices = {}

for i,v in ipairs(device_map) do
  for n=1,v.count do
    -- align forward
    local a = v.align or align
    off = a * math.ceil(off / a)

    local dev = {
      offset = off,
      name = v.name,
      proto = v,
      size = 2 * v.reg16 + v.reg8,
    }
    if v.count > 1 then
      dev.index = n
      dev.name = dev.name .. (" (%d)"):format(n)
    end
    devices[#devices+1] = dev

    off = off + 2 * v.reg16
    off = off + v.reg8
  end
end

io.write("<!-- autogenerated by gen-register-space.lua -->\n")

io.write("# Register Space\n\n")

io.write("## Device Overview\n\n")

for i,v in ipairs(device_map) do
  io.write("**[", v.name, "](",v.url, "):**\n\n")

  if v.count > 1 then
    io.write(("- %d Devices\n"):format(v.count))
  else
    io.write("- 1 Device\n")
  end

  if v.reg16 > 0 then
    io.write(("- %d Registers @ 16 Bit\n"):format(v.reg16))
  end
  if v.reg8 > 0 then
    io.write(("- %d Registers @ 8 Bit\n"):format(v.reg8))
  end

  io.write("\n")
end

io.write("## Device Mapping\n\n")

-- io.write(("- Page Offset (Physical): `0x%06X`\n\n"):format(page_start))

io.write("| Address    | Offset | Count  | Peripherial                         |\n")
io.write("|------------|--------|--------|-------------------------------------|\n")

for i,v in ipairs(devices) do
  io.write(("| `0x%06X` | %6d | %6d | %-35s |\n"):format(page_start+v.offset,v.offset,v.size,("[%s](%s)"):format( v.name,v.proto.url)))
end

io.write(("| `0x%06X` | %6d |        | %-35s |\n"):format(page_start+off,off,"*end of peripherials*"))